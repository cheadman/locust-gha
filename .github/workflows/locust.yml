name: Load Testing with Locust

on:
  workflow_dispatch:
    inputs:
      endpoint:
        description: 'Endpoint URL'
        required: false
        default: 'https://example.com'
      users:
        description: 'Number of Users'
        required: false
        default: '1'
      spawn_rate:
        description: 'Spawn Rate'
        required: false
        default: '1'
      test_duration:
        description: 'Load test duration in minutes'
        required: false
        default: '1'
  push:
    branches:
      - locust

jobs:
  load_test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Convert string to number
        id: convert
        run: |
          echo "::set-output name=duration::${{ github.event.inputs.test_duration }}"
      
      - name: Create locustfile.py
        run: |
          echo '''
          from locust import HttpUser, task, between, events
          import time

          class MyUser(HttpUser):
              wait_time = between(1, 3)

              @task
              def my_task(self):
                  self.client.get("${{ env.ENDPOINT }}")

          @events.init.add_listener
          def on_locust_init(environment, **_kwargs):
              start_time = time.time()
              test_duration = int("${{ github.event.inputs.test_duration }}") * 60

              while True:
                  if time.time() - start_time > test_duration:
                      environment.runner.quit()
                  time.sleep(1)
          ''' > locustfile.py
      
      - name: Install dependencies
        run: |
          pip install locust
      
      - name: Run Locust load test
        timeout-minutes: "${{ steps.convert.outputs.duration }}"
        env:
          ENDPOINT: ${{ github.event.inputs.endpoint }}
          USERS: ${{ github.event.inputs.users }}
          SPAWN_RATE: ${{ github.event.inputs.spawn_rate }}
        run: |
          echo "u: $USERS sr: $SPAWN_RATE ep: $ENDPOINT"
          locust -f locustfile.py --headless -u $USERS -r $SPAWN_RATE --host=$ENDPOINT --csv=reports
      
      - name: Upload reports
        uses: actions/upload-artifact@v2
        with:
          name: Load_Test_Reports
          path: reports
